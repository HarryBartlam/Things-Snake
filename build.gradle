buildscript {
    ext.kotlin_version = '1.2.30'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }

    ext {
        targetSdk = 27
        minSdk = 24
        compileSdk = 27
        buildTools = '27.0.3'
        defaultDimen = "default"
    }

    def okhttpVer = '3.9.1'
    def supportLibraryVer = '27.0.2'
    def retrofitVer = '2.3.0'
    def rxBindingVer = '2.0.0'
    def rxLifecycleVer = '2.2.1'
    def lifecycleVer = '1.0.0'
    def roomVer = '1.0.0'
    def daggerVer = '2.12'
    def espressoVer = '2.2.2'
    def mockitoVer = '2.8.47'
    def junitVer = '4.12'
    def dexMakerVer = '1.2'
    def googleService = '11.6.0'
    def androidThingVersoin = '0.7-devpreview'

    ext {
        ktlintRules = ['com.github.shyiko:ktlint:0.10.0']
        googleNearby = ["com.google.android.gms:play-services-nearby:$googleService"]
        kotlin = ["org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"]
        supportv4 = ["com.android.support:support-v4:$supportLibraryVer"]
        appcompatv7 = ["com.android.support:appcompat-v7:$supportLibraryVer"]
        recyclerview = ["com.android.support:recyclerview-v7:$supportLibraryVer"]
        design = ["com.android.support:design:$supportLibraryVer"]
        cardview = ['com.android.support:cardview-v7:$supportLibraryVer']
        multidex = ['com.android.support:multidex:1.0.2']
        timber = ['com.jakewharton.timber:timber:4.5.1']
        rxjava = ["io.reactivex.rxjava2:rxjava:2.1.5",
                  "io.reactivex.rxjava2:rxandroid:2.0.1",
                  "io.reactivex.rxjava2:rxkotlin:2.1.0"]
        okhttp = ["com.squareup.okhttp3:okhttp:$okhttpVer",
                  "com.squareup.okhttp3:logging-interceptor:$okhttpVer"]
        retrofit = ["com.squareup.retrofit2:retrofit:$retrofitVer",
                    "com.squareup.retrofit2:converter-gson:$retrofitVer",
                    "com.squareup.retrofit2:adapter-rxjava2:$retrofitVer"]
        threetenabp = ['com.jakewharton.threetenabp:threetenabp:1.0.5']
        rxbinding = ["com.jakewharton.rxbinding2:rxbinding-kotlin:$rxBindingVer",
                     "com.jakewharton.rxbinding2:rxbinding-design-kotlin:$rxBindingVer",
                     "com.jakewharton.rxbinding2:rxbinding-recyclerview-v7-kotlin:$rxBindingVer",
                     "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rxBindingVer",
                     "com.jakewharton.rxbinding2:rxbinding-support-v4-kotlin:$rxBindingVer"]
        rxlifecycle = ["com.trello.rxlifecycle2:rxlifecycle:$rxLifecycleVer",
                       "com.trello.rxlifecycle2:rxlifecycle-components:$rxLifecycleVer",
                       "com.trello.rxlifecycle2:rxlifecycle-kotlin:$rxLifecycleVer"]
        androidlifecycle = ["android.arch.lifecycle:extensions:$lifecycleVer",
                            "*android.arch.lifecycle:compiler:$lifecycleVer",
                            "android.arch.lifecycle:reactivestreams:$lifecycleVer"]
        androidroom = ["*android.arch.persistence.room:compiler:$roomVer",
                            "android.arch.persistence.room:runtime:$roomVer",
                            "android.arch.persistence.room:rxjava2:$roomVer"]
        gson = ['com.google.code.gson:gson:2.8.2']
        glide = ['com.github.bumptech.glide:glide:4.2.0']
        rxpref = ['com.f2prateek.rx.preferences2:rx-preferences:2.0.0-RC3']
        rxperm = ['com.tbruyelle.rxpermissions:rxpermissions:0.9.4@aar']
        dagger = ["com.google.dagger:dagger:$daggerVer",
                  "com.google.dagger:dagger-android:$daggerVer",
                  "com.google.dagger:dagger-android-support:$daggerVer",
                  "*com.google.dagger:dagger-compiler:$daggerVer",
                  "*com.google.dagger:dagger-android-processor:$daggerVer"]
        daggercompiler = ["*com.google.dagger:dagger-compiler:$daggerVer"]
        kperm = ['com.github.fondesa:kpermissions:1.0.0']
        androidthings = ["#com.google.android.things:androidthings:$androidThingVersoin"]


        unittest = {}
        unittest.ext {
            junit = ["junit:junit:$junitVer"]
            hamcrest = ['org.hamcrest:hamcrest-all:1.3']
            mockwebserver = ["com.squareup.okhttp3:mockwebserver:$okhttpVer"]
            robolectric = ['org.robolectric:robolectric:3.5.1']
            mockito = ["org.mockito:mockito-core:$mockitoVer"]
            commons = ['org.apache.commons:commons-lang3:3.6']
            threeten = ['org.threeten:threetenbp:1.3.1']
            androidlifecycle = ["android.arch.core:core-testing:$lifecycleVer",
                                "android.arch.persistence.room:testing:$lifecycleVer"]
        }

        uitest = {}
        uitest.ext {
            junit = ["junit:junit:$junitVer"]
            findbugs = ['com.google.code.findbugs:jsr305:3.0.1']
            espresso = ["com.android.support.test.espresso:espresso-core:$espressoVer",
                        "com.android.support.test.espresso:espresso-contrib:$espressoVer"]
            mockito = ["org.mockito:mockito-core:$mockitoVer"]
            dexmaker = ["com.google.dexmaker:dexmaker:$dexMakerVer",
                        "com.google.dexmaker:dexmaker-mockito:$dexMakerVer"]
        }
    }

    ext.internalProject = { code ->
        dependencies {
            implementation project(":$code")
        }
    }

    ext.exposedProject = { code ->
        dependencies {
            api project(":$code")
        }
    }

    ext.internalLib = { codes ->
        dependencies {
            codes.each {
                if (it.startsWith("#")) {
                    compileOnly it.substring(1)
                } else if (it.startsWith("*")) {
                    kapt it.substring(1)
                } else {
                    implementation it
                }
            }
        }
    }

    ext.exposedLib = { codes ->
        dependencies {
            codes.each {
                if (it.startsWith("#")) {
                    compileOnly it.substring(1)
                } else if (it.startsWith("*")) {
                    kapt it.substring(1)
                } else {
                    api it
                }
            }
        }
    }

    ext.test = { codes ->
        dependencies {
            codes.each {
                if (it.startsWith("*")) {
                    kaptTest it.substring(1)
                } else {
                    testImplementation it
                }
            }
        }
    }

    ext.androidTest = { codes ->
        dependencies {
            codes.each {
                if (it.startsWith("*")) {
                    kaptAndroidTest it.substring(1)
                } else {
                    androidTestImplementation it
                }
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
